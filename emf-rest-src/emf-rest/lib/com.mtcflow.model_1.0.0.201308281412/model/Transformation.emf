@namespace(uri="http://com.mtcflow.mtc/1.0", prefix="com.mtcflow.model")
package mtc;

@gmf.diagram(model.extension="mtc", diagram.extension="mtcdiag")
class MTC {
  attr String[1] name = "MTC";
  val File[*] files;
  val Metamodel[*] metamodels;
  val Model[*] models;
  val InputModel[*] inputModels;
  val Transformation[*] transformations;
  val OutputModel[*] outputModels;
  attr String[1] M2MTechnology = "ATL";
  attr String[1] M2TTechnology = "ACCELEO";
  attr String[1] HOTTechnology = "ATL";
  attr String[1] metamodelsFolder = "/metamodels/";
  attr String[1] modelsFolder = "/models/";
  attr String[1] M2MTransformationsFolder = "/transformations/M2M/";
  attr String[1] M2TTransformationsFolder = "/transformations/M2T/";
  val Validation[*] validations;
  val Configuration configurations;
  attr String[1] HOTransformationsFolder = "/transformations/HOT/";
  attr String[1] validationsFolder = "/validations/";
  attr String[1] version = "1.0";
  attr String[1] librariesFolder = "/libraries/";
  attr String description;
  val ReferencedResource[*] referencedResources;
  attr boolean[1] validateConformance = true;
  attr String[1] workspace = "/workspace/";
  transient attr ecore.EMap<EJavaObject, EJavaObject> executionInformation;
}

@gmf.node(label.icon="false", label="name", figure="com.mtcflow.designer.diagram.figures.MetamodelFigure", size="80,108")
class Metamodel extends MTCResource {
  attr String[1] alias;
  attr boolean[1] autoregister = true;
}

@gmf.node(label.icon="false", label="name", figure="com.mtcflow.designer.diagram.figures.M2MFigure", tool.name="M2M - Model To Model", tool.description="Create a new Model To Model Transformation (M2M)", size="80,65")
class M2MTransformation extends ModelProducerTransformation {
  attr boolean[1] refinement = false;
}

@gmf.node(label.icon="false", label="name", figure="com.mtcflow.designer.diagram.figures.M2TFigure", tool.name="M2T - Model To Text", tool.description="Create a new Model To Text Transformation (M2T)", size="80,75")
class M2TTransformation extends Transformation {
  attr String[*] templatesName;

  @gmf.link(label="generates", target.decoration="filledclosedarrow", width="3", color="77,77,77", style="solid")
  ref File[*] outputFiles;
  attr String target;
}

@gmf.node(label.icon="false", figure="com.mtcflow.designer.diagram.figures.TextFileFigure", label="name", tool.name="File", tool.description="Create a new Output File", size="80,114")
class File extends MTCResource {
  attr FileType type;
}

@gmf.node(label.icon="false", figure="com.mtcflow.designer.diagram.figures.ModelFigure", label="name", tool.name="Model", tool.description="Create a new Model", size="80,114")
class Model extends MTCResource {
  op Metamodel[1] getMainMetamodel();

  @gmf.link(target.decoration="filledsquare", label="conforms to", style="dot", width="1", color="207,207,207")
  ref Metamodel[+] metamodel;

  @gmf.link(target.decoration="filledsquare", source.decoration="square", style="dash", width="1", color="69,139,0")
  ref Validation[*] validations;
  attr String format;
}

@gmf.link(source="model", target="transformation", label="alias", width="3", color="77,77,77", target.decoration="filledclosedarrow", incoming="true")
class InputModel {
  op String getFinalMetamodelAlias();
  ref Model[1] model;
  attr String[1] alias = "IN";
  ref Transformation[1] transformation;
  attr String metamodelAlias;
  attr Integer index;
}

abstract class Transformation extends MTCResource {
  attr String technology;
  attr String implementationClass;
  ref Library[*] libraries;
  ref Script preExecutionScript;
  ref Script postExecutionScript;

  @gmf.link(target.decoration="filledsquare", tool.name="Depends on model", style="solid", width="1", color="74,118,110", label="depends on", incoming="true")
  ref Model[*] modelDependencies;

  @gmf.link(source.decoration="filledsquare", tool.name="Depends on file", style="solid", width="1", color="74,118,110", label="depends on", incoming="true")
  ref File[*] fileDependencies;
}

@gmf.link(source="transformation", target="model", label="alias", width="3", color="77,77,77", target.decoration="filledclosedarrow", incoming="true")
class OutputModel {
  op String getFinalMetamodelAlias();
  attr String[1] alias = "OUT";
  ref Model[1] model;
  ref ModelProducerTransformation[1] transformation;
  attr String metamodelAlias;
}

enum FileType {
  JSF = 3;
  JSP = 4;
  PROPERTIES = 2;
  ASPECT = 5;
  JAVA = 1;
  XML = 0;
}

abstract class MTCResource {
  op boolean inWorkspace();
  attr String[1] name;
  attr String URI;
  attr String file;
  ref Tag[*] tags;
  attr String description;
  val Property[*] properties;

  @gmf.link(target.decoration="filledclosedarrow", label="ref", style="dash", width="1", color="69,139,0", incoming="true")
  ref ReferencedResource[*] referencedResources;
  transient attr ecore.EMap<EJavaObject, EJavaObject> executionInformation;
}

@gmf.node(label.icon="false", figure="com.mtcflow.designer.diagram.figures.ValidationFigure", label="name", tool.name="Validation", tool.description="Create a new Validation", size="80,112")
class Validation extends MTCResource {
  attr boolean[1] required = true;
}

@gmf.node(label="name")
class Variable {
  attr String[1] name;
  attr String defaultValue;
  attr String description;
}

@gmf.node(label="name", label.icon="false", tool.name="MTC Configuration", tool.description="Create a new Configuration")
class Configuration {
  attr String[1] name = "Configuration";

  @gmf.compartment(layout="list", collapsible="true")
  val Variable[*] variables;

  @gmf.compartment(layout="list", collapsible="true")
  val Tag[*] tags;

  @gmf.compartment(layout="list", collapsible="true")
  val Library[*] libraries;

  @gmf.compartment(layout="list", collapsible="true")
  val Script[*] scripts;

  @gmf.compartment(layout="list", collapsible="true")
  val ModelEnvironment[*] environments;
}

@gmf.node(label.icon="false", label="name", figure="com.mtcflow.designer.diagram.figures.T2MFigure", tool.name="T2M - Text To Model", tool.description="Create a new Text To Model Transformation (T2M)", size="80,65")
class T2MTransformation extends ModelProducerTransformation {

  @gmf.link(source.decoration="filledclosedarrow", width="3", color="77,77,77", style="solid")
  ref File[*] inputFiles;
}

abstract class ModelProducerTransformation extends Transformation {
}

@gmf.node(label.icon="false", label="name", figure="com.mtcflow.designer.diagram.figures.MTCFigure", tool.name="MTC - Model T. Chain", tool.description="Create a new Model Transformation Chain", size="80,65")
class MTCTransformation extends M2TTransformation, T2MTransformation, M2MTransformation {
}

@gmf.node(label="name")
class Library extends MTCResource {
}

@gmf.node(label="name")
class Tag {
  attr String[1] name;
  attr String description;
}

@gmf.node(label="name")
class Script extends MTCResource {
  attr String implementationClass;
}

@gmf.node(label.icon="false", figure="com.mtcflow.designer.diagram.figures.RefResourceFigure", label="name", tool.name="Referenced Resource", tool.description="Create a new Referenced Resource", size="80,114")
class ReferencedResource extends MTCResource {
  attr String type;
}

@gmf.node(label="name")
class ModelEnvironment {
  attr String[1] name;
  attr String implementationClass;
  attr String[*] params;
}

class Property {
  attr String name;
  attr String value;
}

@gmf.node(label.icon="false", label="name", figure="com.mtcflow.designer.diagram.figures.HOTFigure", tool.name="HOT - High Order Tranformation", tool.description="Create a new High Order Transformation", size="80,65")
class HOTransformation extends M2TTransformation, T2MTransformation, M2MTransformation {

  @gmf.link(label="GEN", target.decoration="filledclosedarrow", tool.name="Generated Transformations", width="3", color="77,77,77", style="solid", incoming="true")
  ref Transformation[*] outputTransformations;
}

