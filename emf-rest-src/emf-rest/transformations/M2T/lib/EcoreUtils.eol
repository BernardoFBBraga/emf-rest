/*******************************************************************************
 * Copyright (c) 2013 EMF-REST.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Camilo Alvarez (cadorca@gmail.com)  - initial API and implementation
 ******************************************************************************/
import "StringUtils.eol";
  
  @cached
  operation EReference isMany() : Boolean{
	return self.upperBound>1 or self.upperBound==-1;
  }

 @cached
  operation EReference getMethod() : String{
    return "get"+self.name.toUpperFirst();
  }

  @cached
  operation EClass isStandAlone() : Boolean{
   for(ref in EReference.all){
   	if(self.abstract or (ref.eType==self and ref.containment)){
   	 return false;
   	}
   }
   return true;
  }
  
  // Attributes
  operation EAttribute name() : String{
    return self.name;
  }
  
  operation EAttribute javaType() : String{
    return self.name;
  }
  
  operation EAttribute getMethod() : String{
    if( not self.getEAttributeType().isUndefined() and self.getEAttributeType().name=="EBoolean")
    return "is"+self.name.toUpperFirst();
    else
    return "get"+self.name.toUpperFirst();
  }
  
  
  //Classes
  operation EClass name() : String{
    return self.name;
  }
  
  operation EClass serializerName() : String{
    return "webmapi.service."+self.name+"Serializer";
  }
  
  operation EClass containerSerializerName() : String{
    return "webmapi.service."+self.inheritanceContainerName()+"Serializer";
  }
  
  operation EClass listVarName() : String{
    return self.name().toLowerFirst()+"List";
  }
  
  operation EClass inheritanceContainerName() : String{
    return self.name+"Container";
  }
  
  operation EClass compoundResourceClassName() : String{
    return "Compound"+self.name+"Resource";
  }   
  
  operation EClass qualifiedCompoundResourceClassName() : String{
    return self.package()+".service.Compound"+self.name+"Resource";
  }  
  
  operation EClass getMethod() : String{
    return "get"+self.name;
  }
  
  operation EClass setMethod() : String{
    return "set"+self.name;
  }
  
  operation EClass idMethod() : String{
    return "get"+self.name+"Id";
  }

  operation EClass rscClassName() : String{
    return self.name+"Resource";
  }
  
  operation EClass qualifiedRscClassName() : String{
    return self.package()+".service."+self.name+"Resource";
  }
  
  @cached
  operation EClass package() : String{
   if(self.eContainer().isDefined())
    return getPackage(self.eContainer());
   else
    return "";
  }
  
  operation getPackage(class : Any) : String{
    while(class.eContainer().isDefined()){
      return getPackage(class.eContainer())+"."+class.name;
    }
    return class.name;
  }
  
  operation EClass packagePath() : String{
    return self.package().replaceAll("[.]","/")+"/";
  }

  operation EClass qualifiedName() : String{
   return self.package()+"."+self.name;
  }
  
  operation EClass qualifiedJavaName() : String{
    return self.package()+".service."+self.name;
  }
  
  @cached
  operation EClass isSuperClass() : Boolean{
    return self.getAllConcreteClasses()->size() >1;
  }
  
  @cached
  operation EClass getAllConcreteClasses() : List{
  //println("Called for"+self.name);
    var resp = new List;
    if(not self.abstract){
    resp.add(self);
    }
    // Look for all classes that has this EClass as a supertype
    for (class in EClass.all) { 
	  if(class.eAllSuperTypes -> exists(c:EClass | c=self)){
	     resp.add(class);
	  }
    }
    return resp;
  }
  
  @cached
  operation EClass getAllConcreteClassesOrderedBySize() : List{
	return self.getAllConcreteClasses()->sortBy(c : EClass | c.getAllConcreteClasses()->size() );
  }
  
  //Packages
  operation EPackage rscName() : String{
    return self.name+"PResource";
  }
  
  operation EPackage javaPkg() : String{
    return getPackage(self)+".service";
  }